/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AreaOfService, NetworkIdentifier, SliceInfo, SliceOptionalArgs, TrafficCategories } from "../models/slice";
import { Device } from "../models/device";
import { ProxyAgent } from "proxy-agent";
import { Response as FetchResponse } from "node-fetch";
export declare class SliceAPI {
    private baseUrl;
    private headers;
    private agent;
    /**
 *  Methods takes rapidHost, rapidKey, and baseUrl.
 * Args:
            rapidHost (str): RapidAPI Host
            rapidKey (str): RapidAPI Key
            baseUrl (str): URL for
    */
    constructor(baseURL: string, rapidKey: string, rapidHost: string, agent: ProxyAgent);
    create(networkId: NetworkIdentifier, sliceInfo: SliceInfo, notificationUrl: string, optionalArgs?: SliceOptionalArgs, modify?: boolean): Promise<unknown>;
    getAll(): Promise<unknown>;
    get(sliceId: string): Promise<unknown>;
    activate(sliceId: string): Promise<FetchResponse>;
    deactivate(sliceId: string): Promise<FetchResponse>;
    delete(sliceId: string): Promise<FetchResponse>;
    convertAreaOfServiceObj(areaOfService: AreaOfService): {
        polygon: {
            lat?: number;
            lon?: number;
        }[];
    };
}
export declare class AttachAPI {
    private baseUrl;
    private headers;
    private agent;
    /**
 *  The class takes rapidHost, rapidKey, and baseUrl.
 * Args:
            rapidHost (str): RapidAPI Host
            rapidKey (str): RapidAPI Key
            baseUrl (str): URL for
    */
    constructor(baseURL: string, rapidKey: string, rapidHost: string, agent: ProxyAgent);
    attach(device: Device, sliceId: string, notificationAuthToken?: string, notificationUrl?: string, trafficCategories?: TrafficCategories): Promise<unknown>;
    detach(id: string): Promise<void>;
    get(id: string): Promise<unknown>;
    getAttachments(): Promise<unknown>;
}
