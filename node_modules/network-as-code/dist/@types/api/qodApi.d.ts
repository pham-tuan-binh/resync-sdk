/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Device } from "../models/device";
import { PortSpec } from "../models/session";
import { ProxyAgent } from "proxy-agent";
/**
 *  Qod API, that sends requests to the API via httpx calls
 */
export declare class QodAPI {
    /**
 *  Methods takes rapidHost, rapidKey, and baseUrl.
 * Args:
            rapidHost (str): RapidAPI Host
            rapidKey (str): RapidAPI Key
            baseUrl (str): URL for
    */
    private headers;
    private baseUrl;
    private agent;
    constructor(baseURL: string, rapidKey: string, rapidHost: string, agent: ProxyAgent);
    /**
 *  Function that hits the create session endpoint with the data
 *
 * #### Args:
 *          profile (string): Name of the requested QoS profile.
            duration (optional): Session duration in seconds.
            device (Device): Device object for the session.
            serviceIpv4 (string): IPv4 address of the service.
            serviceIpv6 (optional): IPv6 address of the service.
            devicePorts (optional): List of the device ports.
            servicePorts (optional): List of the application server ports.
            notificationUrl (optional): Notification URL for session-related events.
            notificationToken (optional): Security bearer token to authenticate registration of session.

        Returns:
            Promise<Session>: response of the endpoint, ideally a Session
 */
    createSession(profile: string, duration: number, device: Device, serviceIpv6?: string, serviceIpv4?: string, devicePorts?: PortSpec, servicePorts?: PortSpec, notificationUrl?: string, notificationAuthToken?: string): Promise<any>;
    /**
 *  This function retrieves all sessions given a device_id
 * Args:
           @param device (Device): The device whose sessions to retrieve
           @returns Promise<any>
 */
    getAllSessions(device: Device): Promise<any>;
    /**
 *  Returns a session given session ID
 * Args:
            sessionId (str): A string session ID

        Returns:
            Session: the session object
 */
    getSession(sessionId: string): Promise<any>;
    /**
 *  Deletes a session given session ID
 * Args:
            sessionId (string): session ID
 */
    deleteSession(sessionId: string): Promise<import("node-fetch").Response>;
    /**
         *  Extends session's duration
         * Args:
                    id (string): session ID
                    additionalDuration (number): Additional session duration in seconds.
        */
    extendSession(sessionId: string, additionalDuration: number): Promise<import("node-fetch").Response>;
}
