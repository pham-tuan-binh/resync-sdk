/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { APIClient } from "./api/client";
import { CongestionInsights } from "./namespaces/congestionInsights";
import { Devices } from "./namespaces/device";
import { DeviceStatus } from "./namespaces/deviceStatus";
import { Sessions } from "./namespaces/session";
import { Slices } from "./namespaces/slice";
/**
 * A client for working with Network as Code.
 *  @example Example:
    import { NetworkAsCodeClient } from "network-as-code";

    client = NetworkAsCodeClient("your_api_token")
    device = client.devices.get("user@example.com")
    console.log(device.getLocation())
    
    ### Args:
        @param token - Authentication token for the Network as Code API.
 */
export declare class NetworkAsCodeClient {
    private _api;
    private _devices;
    private _sessions;
    private _deviceStatus;
    private _slices;
    private _insights;
    constructor(token: string, devMode?: boolean);
    /**
     * Namespace containing functionalities related to mobile subscriptions.
     * @returns NAC Devices
     */
    get devices(): Devices;
    /**
     * Namespace containing functionalities related to mobile subscriptions.
     * @returns NAC sessions
     */
    get sessions(): Sessions;
    /**
     * Namespace containing functionalities related to device status.
     * @returns NAC deviceStatus
     */
    get deviceStatus(): DeviceStatus;
    /**
     * Namespace containing functionalities related to network slicing.
     * @returns NAC slices
     */
    get slices(): Slices;
    /**
     * Namespace containing functionalities related to congestion insights.
     * @returns NAC congestion insights
     */
    get insights(): CongestionInsights;
    /**
     * @returns NAC API
     */
    get api(): APIClient;
}
export declare function main(): void;
