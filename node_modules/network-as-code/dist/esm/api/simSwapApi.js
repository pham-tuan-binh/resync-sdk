/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { errorHandler } from "../errors/index.js";
import fetch from "node-fetch";
export class SimSwapAPI {
    constructor(baseUrl, rapidKey, rapidHost, agent) {
        this.baseUrl = baseUrl;
        this.headers = {
            "Content-Type": "application/json",
            "X-RapidAPI-Host": rapidHost,
            "X-RapidAPI-Key": rapidKey,
        };
        this.agent = agent;
    }
    verifySimSwap(phoneNumber, maxAge) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = maxAge
                ? {
                    phoneNumber,
                    maxAge,
                }
                : { phoneNumber };
            const response = yield fetch(`${this.baseUrl}/check`, {
                method: "POST",
                headers: this.headers,
                body: JSON.stringify(body),
                agent: this.agent,
            });
            errorHandler(response);
            return yield response.json();
        });
    }
    fetchSimSwapDate(phoneNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`${this.baseUrl}/retrieve-date`, {
                method: "POST",
                headers: this.headers,
                body: JSON.stringify({ phoneNumber }),
                agent: this.agent,
            });
            errorHandler(response);
            return yield response.json();
        });
    }
}
