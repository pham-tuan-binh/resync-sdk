/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { errorHandler } from "../errors/index.js";
import fetch from "node-fetch";
/**
 *  Qod API, that sends requests to the API via httpx calls
 */
export class QodAPI {
    constructor(baseURL, rapidKey, rapidHost, agent) {
        this.baseUrl = baseURL;
        this.headers = {
            "X-RapidAPI-Host": rapidHost,
            "X-RapidAPI-Key": rapidKey,
            "content-type": "application/json",
        };
        this.agent = agent;
    }
    /**
 *  Function that hits the create session endpoint with the data
 *
 * #### Args:
 *          profile (string): Name of the requested QoS profile.
            duration (optional): Session duration in seconds.
            device (Device): Device object for the session.
            serviceIpv4 (string): IPv4 address of the service.
            serviceIpv6 (optional): IPv6 address of the service.
            devicePorts (optional): List of the device ports.
            servicePorts (optional): List of the application server ports.
            notificationUrl (optional): Notification URL for session-related events.
            notificationToken (optional): Security bearer token to authenticate registration of session.

        Returns:
            Promise<Session>: response of the endpoint, ideally a Session
 */
    createSession(profile, duration, device, serviceIpv6, serviceIpv4, devicePorts, servicePorts, notificationUrl, notificationAuthToken) {
        return __awaiter(this, void 0, void 0, function* () {
            let sessionPayload = {
                qosProfile: profile,
                device: JSON.parse(JSON.stringify(device)),
                applicationServer: { ipv4Address: serviceIpv4 },
                devicePorts: devicePorts ? devicePorts : undefined,
                applicationServerPorts: servicePorts ? servicePorts : undefined,
                duration,
            };
            if (serviceIpv6) {
                sessionPayload["applicationServer"]["ipv6Address"] = serviceIpv6;
            }
            if (notificationUrl) {
                sessionPayload["webhook"] = { notificationUrl: notificationUrl };
                if (notificationAuthToken) {
                    sessionPayload["webhook"]["notificationAuthToken"] =
                        "Bearer " + notificationAuthToken;
                }
            }
            let response = yield fetch(this.baseUrl + "/sessions", {
                method: "POST",
                headers: this.headers,
                body: JSON.stringify(sessionPayload),
                agent: this.agent,
            });
            errorHandler(response);
            return response.json();
        });
    }
    /**
 *  This function retrieves all sessions given a device_id
 * Args:
           @param device (Device): The device whose sessions to retrieve
           @returns Promise<any>
 */
    getAllSessions(device) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = "";
            if (device.networkAccessIdentifier) {
                url = `/sessions?networkAccessIdentifier=${device.networkAccessIdentifier}`;
            }
            else if (device.phoneNumber) {
                url = `/sessions?phoneNumber=${device.phoneNumber}`;
            }
            let response = yield fetch(this.baseUrl + url, {
                method: "GET",
                headers: this.headers,
                agent: this.agent,
            });
            errorHandler(response);
            return response.json();
        });
    }
    /**
 *  Returns a session given session ID
 * Args:
            sessionId (str): A string session ID

        Returns:
            Session: the session object
 */
    getSession(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/sessions/${sessionId}`;
            let response = yield fetch(this.baseUrl + url, {
                method: "GET",
                headers: this.headers,
                agent: this.agent,
            });
            errorHandler(response);
            return response.json();
        });
    }
    /**
 *  Deletes a session given session ID
 * Args:
            sessionId (string): session ID
 */
    deleteSession(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/sessions/${sessionId}`;
            let response = yield fetch(this.baseUrl + url, {
                method: "DELETE",
                headers: this.headers,
                agent: this.agent,
            });
            errorHandler(response);
            return response;
        });
    }
    /**
         *  Extends session's duration
         * Args:
                    id (string): session ID
                    additionalDuration (number): Additional session duration in seconds.
        */
    extendSession(sessionId, additionalDuration) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/sessions/${sessionId}/extend`;
            let response = yield fetch(this.baseUrl + url, {
                method: "POST",
                headers: this.headers,
                body: JSON.stringify({
                    requestedAdditionalDuration: additionalDuration,
                }),
                agent: this.agent,
            });
            errorHandler(response);
            return response;
        });
    }
}
