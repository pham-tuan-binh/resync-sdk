/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CongestionInsightsSubscription } from "../models/congestionInsights.js";
import { Namespace } from "./namespace.js";
/**
 *  Gain insights from network analytics.
 *
 */
export class CongestionInsights extends Namespace {
    /**
     *  Create subscription for congestion insights.
     *
            @param device (Device): Identifier of the device.
            @param subscriptionExpireTime (Date|string): Subscription expire time
            @param notificationUrl (string): Notification URL for congestion insights.
            @param notificationAuthToken (string): Notification Auth Token
            @returns Promise<CongestionInsightsSubscription>
    */
    subscribeToCongestionInfo(device, subscriptionExpireTime, notificationUrl, notificationAuthToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.api.insights.subscribe(device, subscriptionExpireTime instanceof Date
                ? subscriptionExpireTime.toISOString()
                : subscriptionExpireTime, notificationUrl, notificationAuthToken);
            return new CongestionInsightsSubscription(this.api, res.subscriptionId, res.startsAt ? new Date(res.startsAt) : undefined, res.expiresAt ? new Date(res.expiresAt) : undefined);
        });
    }
    /**
     *  Get a subscription by its ID.
     *
            @param subscriptionId (string): Resource ID
            @returns Promise<CongestionInsightsSubscription>
    */
    get(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.api.insights.get(subscriptionId);
            return new CongestionInsightsSubscription(this.api, res.subscriptionId, res.startsAt ? new Date(res.startsAt) : undefined, res.expiresAt ? new Date(res.expiresAt) : undefined);
        });
    }
    /**
     *  Get all active subscriptions of Congestion Insights
     *
     * @returns Promise<CongestionInsightsSubscription[]>
     */
    getSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.api.insights.getAll();
            return res.map((subscription) => {
                return new CongestionInsightsSubscription(this.api, subscription.subscriptionId, subscription.startsAt, subscription.expiresAt);
            });
        });
    }
}
