/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Device } from "../models/device.js";
import { Subscription } from "../models/deviceStatus.js";
import { Namespace } from "./namespace.js";
export class DeviceStatus extends Namespace {
    /**
     *  Create subscription for device connectivity status.
     *
            @param device (Device): Identifier of the device.
            @param eventType (string): Event type of the subscription.
            @param notificationUrl (string): Notification URL for session-related events.
            @param optionalArgs (SubscribeOptionalArgs): optional arguments(subscriptionExpireTime, maxNumberOfReports, notificationAuthToken)
            @returns Promise<Subscription>
    */
    subscribe(device, eventType, notificationUrl, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriptionExpireTime = optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.subscriptionExpireTime;
            const jsonData = yield this.api.deviceStatus.subscribe(device, eventType, notificationUrl, Object.assign({ subscriptionExpireTime: subscriptionExpireTime instanceof Date
                    ? subscriptionExpireTime.toISOString()
                    : subscriptionExpireTime }, optionalArgs));
            return new Subscription(this.api, jsonData.subscriptionId, device, eventType, notificationUrl, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.notificationAuthToken, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.maxNumberOfReports, jsonData.startsAt ? new Date(jsonData.startsAt) : undefined, jsonData.expiresAt ? new Date(jsonData.expiresAt) : undefined);
        });
    }
    /**
     *  Get a subscription by its external ID.
     *
            @param eventSubscriptionId (string): Resource ID
            @example ```TypeScript
            const subscription = await client.deviceStatus.get(subscription.eventSubscriptionId);
            ```
            @returns Promise<Subscription>
    */
    get(eventSubscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const jsonData = yield this.api.deviceStatus.get(eventSubscriptionId);
            const deviceDetails = jsonData.subscriptionDetail.device;
            const device = new Device(this.api, deviceDetails.networkAccessIdentifier, deviceDetails.ipv4Address, deviceDetails.ipv6Address, deviceDetails.phoneNumber);
            return new Subscription(this.api, eventSubscriptionId, device, jsonData.subscriptionDetail["type"], jsonData.webhook.notificationUrl, jsonData.webhook.notificationAuthToken, jsonData.maxNumberOfReports, jsonData.startsAt ? new Date(jsonData.startsAt) : undefined, jsonData.expiresAt ? new Date(jsonData.expiresAt) : undefined);
        });
    }
    /**
     *  Get a list of active subscriptions
     *
     *      @example ```TypeScript
            const subscriptions = await client.deviceStatus.getSubscriptions();
            ```
            @returns Promise<Subscription[]>
    */
    getSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const jsonData = yield this.api.deviceStatus.getSubscriptions();
            return jsonData.map((entry) => {
                const deviceDetails = entry.subscriptionDetail.device;
                const device = new Device(this.api, deviceDetails.networkAccessIdentifier, deviceDetails.ipv4Address, deviceDetails.ipv6Address, deviceDetails.phoneNumber);
                return new Subscription(this.api, entry.subscriptionId, device, entry.subscriptionDetail["type"], entry.webhook.notificationUrl, entry.webhook.notificationAuthToken, entry.maxNumberOfReports, entry.startsAt ? new Date(entry.startsAt) : undefined, entry.expiresAt ? new Date(entry.expiresAt) : undefined);
            });
        });
    }
}
