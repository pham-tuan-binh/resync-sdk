/**
 * Copyright 2024 Nokia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * A class representing the `Session` model.

 * #### Private Attributes:
        _api(APIClient): An API client object.

    #### Public Attributes:
        @param id (string): Session identifier.
        @param profile (string): Name of the requested QoS profile.
        @param device (Device): Session belongs to device.
        @param duration (number | undefined): The duration of a given session.
        @param serviceIpv4 (string): IPv4 address of a service.
        @param serviceIpv6 (string): IPv6 address of a service.
        @param servicePorts (Union[PortsSpec, undefined]): List of ports for a service.
        @param status(string): Status of the requested QoS.
        @param startedAt (Union[number, undefined]): Starting time of the session.
        @param expiresAt (Union[number, undefined]): Expiry time of the session.
    #### Public Methods:
        deleteSession (): Deletes a given session.
        extendSession (): Extends the duration of a given session.
    #### Static Methods:
        convertSessionModel (Session): Returns A `Session` instance.
 */
export class QoDSession {
    constructor(api, options = {}) {
        this.serviceIpv4 = "";
        this.serviceIpv6 = "";
        this._api = api;
        this.id = options === null || options === void 0 ? void 0 : options.id;
        this.profile = options === null || options === void 0 ? void 0 : options.profile;
        this.status = options === null || options === void 0 ? void 0 : options.status;
        this.startedAt = options === null || options === void 0 ? void 0 : options.startedAt;
        this.expiresAt = options === null || options === void 0 ? void 0 : options.expiresAt;
        this.device = options === null || options === void 0 ? void 0 : options.device;
        this.serviceIpv4 = options === null || options === void 0 ? void 0 : options.serviceIpv4;
        this.serviceIpv6 = options === null || options === void 0 ? void 0 : options.serviceIpv6;
        this.servicePorts = options === null || options === void 0 ? void 0 : options.servicePorts;
        this.duration = options === null || options === void 0 ? void 0 : options.duration;
    }
    /**
     *  Deletes a given session
     */
    deleteSession() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id) {
                yield this._api.sessions.deleteSession(this.id);
            }
        });
    }
    /**
     *  Extends the duration of a given session.
     * #### Args:
            @param additionalDuration (number): Additional session duration in seconds.
     */
    extendSession(additionalDuration) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id) {
                const res = yield this._api.sessions.extendSession(this.id, additionalDuration);
                const sessionJson = yield res.json();
                this.duration = sessionJson.duration;
            }
        });
    }
    /**
 * Returns a `Session` instance.

 * Assigns the startedAt and expiresAt attributes None if their value not found.
     #### Args:
            @param device (any): A `Device` object.
            @param session (any): A `Session` object created by the low-level API.
            @returns QoDSession
 */
    static convertSessionModel(api, device, session) {
        let startedAt = session["startedAt"]
            ? new Date(session["startedAt"])
            : null;
        let expiresAt = session["expiresAt"]
            ? new Date(session["expiresAt"])
            : null;
        const service = session["applicationServer"];
        return new QoDSession(api, {
            id: session["sessionId"],
            device: device,
            devicePorts: undefined,
            serviceIpv4: service ? service["ipv4Address"] : "",
            serviceIpv6: service ? service["ipv6Address"] : "",
            servicePorts: session["applicationServerPorts"],
            profile: session["qosProfile"],
            status: session["qosStatus"],
            duration: session["duration"],
            startedAt,
            expiresAt,
        });
    }
}
